# Makefile para o projeto Genius360
.PHONY: all up down ps fix-server start exec shell logs rails-console db-console db-migrate db-reset server-status server-start server-stop server-restart help db-setup db-check fix-db-connection check-docker-network recreate-docker-network get-postgres-ip check-ports kill-port start-force find-free-port server-on-any-port server-status-detailed server-fix server-clean server-smart-start fix-all find-compose-file check-containers container-logs fix-container restart-all repair-web first-run bundle-install rebuild clean-all create-db-script

# Valor padrão para a porta
port ?= 3000

# Variáveis de ambiente - ajustado para procurar nos locais mais comuns
SCRIPTS_DIR = .scripts

# Verificação para encontrar o arquivo docker-compose.yml
find-compose-file:
	@if [ -f "docker-compose.yml" ]; then \
		echo "docker-compose"; \
	elif [ -f ".docker/docker-compose.yml" ]; then \
		echo "docker-compose -f .docker/docker-compose.yml"; \
	elif [ -f "docker/docker-compose.yml" ]; then \
		echo "docker-compose -f docker/docker-compose.yml"; \
	else \
		echo "Erro: Não foi possível encontrar o arquivo docker-compose.yml" >&2; \
		echo "Por favor, especifique o caminho correto no Makefile." >&2; \
		exit 1; \
	fi

# Usar o comando padrão do docker-compose sem referência explícita ao arquivo
DOCKER_COMPOSE = docker-compose

# Definir variáveis para scripts
SERVER_MANAGER = $(SCRIPTS_DIR)/manage_server.sh
FIX_SERVER = $(SCRIPTS_DIR)/fix_server.sh
DOCKER_DIAG = $(SCRIPTS_DIR)/docker_diagnostico.sh
RESTART_SERVICES = $(SCRIPTS_DIR)/restart_services.sh
CHECK_STATUS = $(SCRIPTS_DIR)/check_status.sh
PERFORMANCE_CHECK = $(SCRIPTS_DIR)/performance_check.sh

all:
	@echo "Comandos disponíveis:"
	@echo "  make up           - Inicia os serviços em background"
	@echo "  make down         - Para todos os containers"
	@echo "  make ps           - Lista os containers em execução"
	@echo "  make fix-server   - Corrige problema 'server already running'"
	@echo "  make start        - Inicia todos os serviços e abre shell no container"
	@echo "  make exec         - Inicia os containers e abre o console web"
	@echo "  make shell        - Abre o terminal no container web"
	@echo "  make logs         - Exibe os logs dos containers"
	@echo "  make rails-console- Abre o console Rails"
	@echo "  make db-console   - Abre o console PostgreSQL"
	@echo "  make db-migrate   - Executa migrações do banco de dados"
	@echo "  make db-reset     - Recria o banco de dados"
	@echo "  make db-setup     - Configura o banco de dados (cria usuário e configura senha)"
	@echo "  make db-check     - Verifica a conexão com o banco de dados"
	@echo "  make fix-db-connection - Resolve problemas de conexão com o banco de dados"
	@echo "  make check-docker-network - Verifica a rede Docker"
	@echo "  make recreate-docker-network - Recria a rede Docker"
	@echo "  make get-postgres-ip - Obtém o IP do container PostgreSQL"
	@echo "  make server-status- Verifica o status do servidor"
	@echo "  make server-start - Inicia o servidor na porta 3001"
	@echo "  make server-stop  - Para o servidor"
	@echo "  make server-restart- Reinicia o servidor na porta 3001"
	@echo "  make help         - Exibe os comandos disponíveis"
	@echo "  make check-ports  - Verifica as portas em uso"
	@echo "  make kill-port    - Libera uma porta específica"
	@echo "  make rebuild      - Reconstrói completamente o ambiente"
	@echo "  make clean-all    - Limpa todos os caches e dados"

check-ports:
	@echo "🔍 Verificando portas em uso..."
	@echo "🔹 Porta 3000 (Rails):"
	@lsof -i :3000 || echo "✅ Porta 3000 livre"
	@echo "🔹 Porta 3001 (Rails alternativo):"
	@lsof -i :3001 || echo "✅ Porta 3001 livre"
	@echo "🔹 Porta 5432 (PostgreSQL original):"
	@lsof -i :5432 || echo "✅ Porta 5432 livre"
	@echo "🔹 Porta 5433 (PostgreSQL alternativo):"
	@lsof -i :5433 || echo "✅ Porta 5433 livre"
	@echo "✨ Verificação de portas concluída"

kill-port:
	@if [ -z "$(port)" ]; then \
		echo "⚠️ Por favor, especifique uma porta: make kill-port port=5432"; \
	else \
		echo "🔍 Verificando processos usando a porta $(port)..."; \
		pid=$$(lsof -t -i:$(port)); \
		if [ -z "$$pid" ]; then \
			echo "✅ Nenhum processo encontrado usando a porta $(port)"; \
		else \
			echo "🛑 Finalizando processo(s) $$pid usando a porta $(port)..."; \
			for p in $$pid; do \
				kill -9 $$p; \
			done; \
			echo "✅ Porta $(port) liberada!"; \
		fi; \
	fi

up:
	@echo "🚀 Iniciando serviços..."
	@$(DOCKER_COMPOSE) up -d

down:
	@echo "🛑 Parando serviços..."
	@$(DOCKER_COMPOSE) down

ps:
	@$(DOCKER_COMPOSE) ps

fix-server:
	@echo "🔧 Corrigindo problema de 'server already running'..."
	@$(DOCKER_COMPOSE) exec web bash -c "rm -f /app/tmp/pids/server.pid" || echo "⚠️ Não foi possível remover o arquivo PID. Tentando outra abordagem..."
	@$(DOCKER_COMPOSE) exec web bash -c "if ps aux | grep -q '[p]uma'; then pkill -f puma; fi" || echo "⚠️ Não foi possível encerrar processos Puma."
	@echo "✅ Arquivo PID removido"

start:
	@echo "🚀 Iniciando servidor Rails..."
	@chmod +x bin/port_manager.sh
	@bin/port_manager.sh $(port) || (echo "⚠️ Tentando com porta alternativa..." && bin/port_manager.sh 3002)
	@make server-stop

start-force:
	@$(DOCKER_COMPOSE) exec web bash -c "cd /app && rm -f tmp/pids/server.pid && ps aux | grep -q '[p]uma' && pkill -f puma || true"
	@echo "🚀 Iniciando servidor Rails (modo forçado)..."
	@chmod +x bin/port_manager.sh
	@bin/port_manager.sh $(port) true
	@echo "✅ Servidor Rails reiniciado completamente"

find-free-port:
	@echo "🔍 Procurando por uma porta livre..."
	@lsof -i :$(port) >/dev/null && echo "❌ Porta $(port) está em uso." || echo "✅ Porta $(port) está livre!"
	@make fix-server

server-on-any-port:
	@echo "🚀 Iniciando servidor Rails em qualquer porta disponível..."
	@for port in 3000 3001 3002 3003 3004 3005; do \
		echo "Tentando porta $$port..."; \
		if ! lsof -i :$$port >/dev/null 2>&1; then \
			echo "✅ Porta $$port disponível! Iniciando servidor..."; \
			make fix-server; \
			$(DOCKER_COMPOSE) exec web bash -c "cd /app && bundle exec rails s -p $$port -b '0.0.0.0' -d"; \
			echo "✅ Servidor Rails iniciado na porta $$port"; \
			echo "🌐 Acesse: http://localhost:$$port"; \
			exit 0; \
		fi; \
	done; \
	echo "❌ Não foi possível encontrar uma porta disponível entre 3000-3005."

exec:
	@echo "🚀 Iniciando ambiente Genius360..."
	@$(DOCKER_COMPOSE) up -d
	@echo "⏳ Aguardando serviços..."
	@sleep 5
	@echo "🔍 Verificando status do container web..."
	@if docker ps | grep -q "genius360_web.*Up"; then \
		echo "✅ Container web está rodando. Abrindo shell..."; \
		$(DOCKER_COMPOSE) exec web bash; \
	else \
		echo "⚠️ Container web não está rodando corretamente."; \
		echo "🔧 Tentando reparo automático..."; \
		make repair-web; \
		echo "⏳ Verificando novamente o status do container..."; \
		if docker ps | grep -q "genius360_web.*Up"; then \
			echo "✅ Container reparado com sucesso. Tentando instalar dependências..."; \
			make bundle-install; \
			echo "⏳ Abrindo shell..."; \
			$(DOCKER_COMPOSE) exec web bash; \
		else \
			echo "❌ Falha ao reparar o container web."; \
			echo "Por favor, execute 'make container-logs container=web' para mais detalhes."; \
			exit 1; \
		fi; \
	fi

shell:
	@echo "🐚 Abrindo terminal no container web..."
	@$(DOCKER_COMPOSE) exec web bash

logs:
	@$(DOCKER_COMPOSE) logs -f

rails-console:
	@echo "🛤️ Abrindo console Rails..."
	@$(DOCKER_COMPOSE) exec web rails console

db-console:
	@echo "🗄️ Abrindo console PostgreSQL..."
	@$(DOCKER_COMPOSE) exec postgres psql -U postgres -d genius360_development

db-migrate:
	@echo "🔄 Executando migrações do banco de dados..."
	@$(DOCKER_COMPOSE) exec web rails db:migrate

db-reset:
	@echo "⚠️ Recriando banco de dados... ⚠️"
	@$(DOCKER_COMPOSE) exec web rails db:drop db:create db:migrate db:seed

db-setup:
	@echo "🔧 Configurando banco de dados..."
	@mkdir -p $(SCRIPTS_DIR)/db
	@chmod +x $(SCRIPTS_DIR)/db/setup.sh || make create-db-script
	@$(SCRIPTS_DIR)/db/setup.sh

db-check:
	@echo "🔍 Verificando conexão com o banco de dados..."
	@$(DOCKER_COMPOSE) exec web bash -c "cd /app && bundle exec rails runner 'ActiveRecord::Base.connection; puts \"✅ Conexão com o banco de dados está funcionando corretamente\"'" || echo "❌ Falha na conexão com o banco de dados"

fix-db-connection:
	@echo "🔧 Resolvendo problemas de conexão com o banco de dados..."
	@make db-setup
	@echo "⏳ Aguardando a aplicação da configuração..."
	@sleep 3
	@make db-check
	@echo "🚀 Tente reiniciar o servidor agora com 'make server-restart'"

check-docker-network:
	@echo "🔍 Verificando rede Docker..."
	@mkdir -p $(SCRIPTS_DIR)
	@chmod +x $(DOCKER_DIAG) || echo "⚠️ Script $(DOCKER_DIAG) não encontrado"
	@$(DOCKER_DIAG) || echo "⚠️ Falha ao executar diagnóstico de rede Docker"

recreate-docker-network:
	@echo "🔄 Recriando rede Docker..."
	@$(DOCKER_COMPOSE) down
	@docker network prune -f
	@$(DOCKER_COMPOSE) up -d
	@echo "✅ Rede Docker recriada. Aguarde alguns segundos..."
	@sleep 5
	@make check-docker-network

get-postgres-ip:
	@echo "🔍 Obtendo IP do container PostgreSQL..."
	@echo "IP: $(shell docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' genius360_postgres)"
	@echo "Para usar este IP, atualize seu config/database.yml com este valor no campo 'host'"

server-status:
	@echo "🔍 Verificando status do servidor Rails..."
	@mkdir -p $(SCRIPTS_DIR)
	@chmod +x $(CHECK_STATUS) || echo "⚠️ Script $(CHECK_STATUS) não encontrado"
	@$(CHECK_STATUS) || echo "⚠️ Falha ao verificar status do servidor"

server-status-detailed:
	@echo "🔍 Verificando status detalhado do servidor Rails..."
	@chmod +x bin/rails_server_manager.sh || echo "⚠️ Script bin/rails_server_manager.sh não encontrado"
	@$(DOCKER_COMPOSE) exec web /app/bin/rails_server_manager.sh status || echo "⚠️ Falha ao verificar status detalhado"
	@echo "✨ Verificação de status concluída"

server-start:
	@echo "🚀 Iniciando servidor Rails na porta 3001..."
	@make fix-server
	@$(DOCKER_COMPOSE) exec web bash -c "cd /app && bundle exec rails s -p 3001 -b '0.0.0.0' -d"
	@echo "✅ Servidor Rails iniciado na porta 3001"
	@echo "🌐 Acesse: http://localhost:3001"

server-stop:
	@echo "🛑 Parando servidor Rails..."
	@$(DOCKER_COMPOSE) exec web bash -c "rm -f /app/tmp/pids/server.pid"
	@echo "✅ Servidor Rails parado"

server-restart:
	@echo "🔄 Reiniciando servidor Rails..."
	@mkdir -p $(SCRIPTS_DIR)
	@chmod +x $(RESTART_SERVICES) || echo "⚠️ Script $(RESTART_SERVICES) não encontrado"
	@$(RESTART_SERVICES) || make server-stop && make server-start

server-fix:
	@echo "🔧 Corrigindo problemas do servidor Rails..."
	@mkdir -p $(SCRIPTS_DIR)
	@chmod +x $(FIX_SERVER) || echo "⚠️ Script $(FIX_SERVER) não encontrado"
	@$(FIX_SERVER) || make fix-server

server-clean:
	@echo "🧹 Limpando arquivos temporários do servidor..."
	@chmod +x bin/rails_server_manager.sh || echo "⚠️ Script bin/rails_server_manager.sh não encontrado"
	@$(DOCKER_COMPOSE) exec web /app/bin/rails_server_manager.sh clean || echo "⚠️ Falha ao limpar arquivos temporários"
	@echo "✅ Arquivos temporários limpos"

server-smart-start:
	@echo "🚀 Iniciando servidor Rails inteligentemente..."
	@chmod +x bin/rails_server_manager.sh || echo "⚠️ Script bin/rails_server_manager.sh não encontrado"
	@$(DOCKER_COMPOSE) exec web /app/bin/rails_server_manager.sh start $(port) || make server-start
	@echo "✨ Comando de inicialização executado"

fix-all:
	@echo "🔧 Corrigindo todos os problemas conhecidos..."
	@make down
	@mkdir -p $(SCRIPTS_DIR)
	@chmod +x $(SCRIPTS_DIR)/development_setup.sh || echo "⚠️ Script $(SCRIPTS_DIR)/development_setup.sh não encontrado"
	@$(SCRIPTS_DIR)/development_setup.sh || echo "⚠️ Falha ao executar script de setup de desenvolvimento"
	@make up
	@make bundle-install
	@make db-setup
	@make server-fix
	@make server-clean
	@make server-smart-start port=3002
	@echo "✨ Sistema corrigido e reiniciado"

check-containers:
	@echo "🔍 Verificando status dos containers..."
	@docker ps -a | grep genius360 || echo "⚠️ Nenhum container encontrado"
	@echo "✨ Checagem concluída"

container-logs:
	@if [ -z "$(container)" ]; then \
		echo "⚠️ Por favor, especifique um container: make container-logs container=web"; \
		echo "Containers disponíveis:"; \
		docker ps -a --format "{{.Names}}" | grep genius360; \
	else \
		echo "📋 Exibindo logs do container genius360_$(container)..."; \
		docker logs genius360_$(container); \
	fi

fix-container:
	@if [ -z "$(container)" ]; then \
		echo "⚠️ Por favor, especifique um container: make fix-container container=web"; \
	else \
		echo "🔧 Tentando corrigir problemas no container genius360_$(container)..."; \
		docker stop genius360_$(container) || true; \
		docker start genius360_$(container); \
		echo "⏳ Aguardando inicialização..."; \
		sleep 5; \
		docker ps -a | grep genius360_$(container); \
	fi

restart-all:
	@echo "🔄 Reiniciando todos os containers..."
	@$(DOCKER_COMPOSE) restart
	@echo "⏳ Aguardando reinicialização..."
	@sleep 10
	@$(DOCKER_COMPOSE) ps

repair-web:
	@echo "🔧 Iniciando reparo do container web..."
	@chmod +x bin/repair_web_container.sh || echo "⚠️ Script bin/repair_web_container.sh não encontrado"
	@bin/repair_web_container.sh || echo "⚠️ Falha ao executar script de reparo"

bundle-install:
	@echo "📦 Instalando dependências do bundle..."
	@chmod +x bin/install_bundle.sh || echo "⚠️ Script bin/install_bundle.sh não encontrado"
	@bin/install_bundle.sh || echo "⚠️ Falha ao executar bundle install"

first-run:
	@echo "🚀 Configurando o ambiente para primeira execução..."
	@chmod +x bin/fix_volume_mapping.sh || echo "⚠️ Script bin/fix_volume_mapping.sh não encontrado"
	@bin/fix_volume_mapping.sh || echo "⚠️ Falha ao ajustar mapeamento de volumes"
	@make down
	@make create-db-script
	@make up
	@make bundle-install
	@make db-setup
	@echo "✨ Configuração inicial concluída!"
	@echo "🌟 Agora você pode executar 'make exec' para abrir um shell no container."

# Comando para criar o script de setup do banco de dados
create-db-script:
	@echo "📝 Criando diretório e script para setup do banco de dados..."
	@mkdir -p $(SCRIPTS_DIR)/db
	@cat > $(SCRIPTS_DIR)/db/setup.sh << 'EOF'
#!/bin/bash

# Script para configurar o banco de dados PostgreSQL

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "$${BLUE}🔧 Configurando banco de dados PostgreSQL...$${NC}"

# Verificar se o container postgres está rodando
if ! docker ps | grep -q "genius360_postgres"; then
    echo -e "$${YELLOW}⚠️ Container Postgres não está rodando. Tentando iniciar...$${NC}"
    docker start genius360_postgres
    sleep 3
    
    if ! docker ps | grep -q "genius360_postgres"; then
        echo -e "$${RED}❌ Não foi possível iniciar o container Postgres. Verifique o docker-compose.$${NC}"
        exit 1
    fi
fi

echo -e "$${BLUE}🔍 Verificando conexão com o banco de dados...$${NC}"

# Verificar se já é possível conectar ao banco
if docker exec genius360_postgres psql -U postgres -c '\l' > /dev/null 2>&1; then
    echo -e "$${GREEN}✅ Conexão com PostgreSQL estabelecida!$${NC}"
else
    echo -e "$${YELLOW}⚠️ Aguardando PostgreSQL iniciar completamente...$${NC}"
    sleep 5
fi

echo -e "$${BLUE}🔧 Criando banco de dados e usuário...$${NC}"

# Criar usuário se não existir
docker exec genius360_postgres psql -U postgres -c "SELECT 1 FROM pg_roles WHERE rolname='postgres'" | grep -q 1 || docker exec genius360_postgres psql -U postgres -c "CREATE USER postgres WITH SUPERUSER PASSWORD 'postgres';"

# Criar banco de dados de desenvolvimento
docker exec genius360_postgres psql -U postgres -c "SELECT 1 FROM pg_database WHERE datname='genius360_development'" | grep -q 1 || docker exec genius360_postgres psql -U postgres -c "CREATE DATABASE genius360_development OWNER postgres;"

# Criar banco de dados de teste
docker exec genius360_postgres psql -U postgres -c "SELECT 1 FROM pg_database WHERE datname='genius360_test'" | grep -q 1 || docker exec genius360_postgres psql -U postgres -c "CREATE DATABASE genius360_test OWNER postgres;"

echo -e "$${BLUE}🔧 Configurando permissões...$${NC}"

# Conceder todos os privilégios nos bancos para o usuário
docker exec genius360_postgres psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE genius360_development TO postgres;"
docker exec genius360_postgres psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE genius360_test TO postgres;"

echo -e "$${GREEN}✅ Configuração do banco de dados concluída!$${NC}"

# Verificar se o container web está rodando
if docker ps | grep -q "genius360_web"; then
    echo -e "$${BLUE}🔧 Atualizando arquivo database.yml no container web...$${NC}"
    
    # Verificar se o arquivo database.yml existe e atualizá-lo
    docker exec genius360_web bash -c "if [ -f /app/config/database.yml ]; then \\
        sed -i 's/host: .*/host: postgres/' /app/config/database.yml; \\
        sed -i 's/username: .*/username: postgres/' /app/config/database.yml; \\
        sed -i 's/password: .*/password: postgres/' /app/config/database.yml; \\
        echo '✅ Arquivo database.yml atualizado!'; \\
    else \\
        echo '⚠️ Arquivo database.yml não encontrado. É necessário criá-lo manualmente.'; \\
    fi"
    
    # Criar o arquivo database.yml se não existir
    docker exec genius360_web bash -c "if [ ! -f /app/config/database.yml ]; then \\
        mkdir -p /app/config; \\
        echo 'default: &default' > /app/config/database.yml; \\
        echo '  adapter: postgresql' >> /app/config/database.yml; \\
        echo '  encoding: unicode' >> /app/config/database.yml; \\
        echo '  pool: <%= ENV.fetch(\"RAILS_MAX_THREADS\") { 5 } %>' >> /app/config/database.yml; \\
        echo '  host: postgres' >> /app/config/database.yml; \\
        echo '  username: postgres' >> /app/config/database.yml; \\
        echo '  password: postgres' >> /app/config/database.yml; \\
        echo '' >> /app/config/database.yml; \\
        echo 'development:' >> /app/config/database.yml; \\
        echo '  <<: *default' >> /app/config/database.yml; \\
        echo '  database: genius360_development' >> /app/config/database.yml; \\
        echo '' >> /app/config/database.yml; \\
        echo 'test:' >> /app/config/database.yml; \\
        echo '  <<: *default' >> /app/config/database.yml; \\
        echo '  database: genius360_test' >> /app/config/database.yml; \\
        echo '' >> /app/config/database.yml; \\
        echo 'production:' >> /app/config/database.yml; \\
        echo '  <<: *default' >> /app/config/database.yml; \\
        echo '  database: genius360_production' >> /app/config/database.yml; \\
        echo '✅ Arquivo database.yml criado!'; \\
    fi"
    
    echo -e "$${GREEN}✅ Configuração do database.yml concluída!$${NC}"
fi

echo -e "$${GREEN}✅ Banco de dados configurado com sucesso!$${NC}"
EOF
	@chmod +x $(SCRIPTS_DIR)/db/setup.sh
	@echo "✅ Script de setup do banco de dados criado em $(SCRIPTS_DIR)/db/setup.sh"

# Comando para limpar todos os caches e dados
clean-all:
	@echo "🧹 Limpando todos os caches e dados..."
	@$(DOCKER_COMPOSE) down -v || true
	@echo "🗑️ Removendo arquivos temporários..."
	@rm -rf tmp/* log/* .bundle vendor/bundle 2>/dev/null || true
	@echo "🗑️ Removendo volumes Docker..."
	@docker volume rm $(shell docker volume ls -q | grep genius360) 2>/dev/null || true
	@echo "🧹 Limpando cache do Docker..."
	@docker builder prune -f || true
	@echo "✅ Limpeza concluída!"

# Comando para reconstruir completamente o ambiente
rebuild:
	@echo "🔨 Reconstruindo completamente o ambiente..."
	@make clean-all
	@echo "🔨 Criando scripts necessários..."
	@make create-db-script
	@echo "🔨 Reconstruindo containers..."
	@$(DOCKER_COMPOSE) build --no-cache || echo "⚠️ Falha ao reconstruir containers"
	@make up
	@make bundle-install
	@echo "🔨 Configurando o banco de dados..."
	@make db-setup
	@echo "✅ Reconstrução completa concluída!"
	@echo "🌟 Agora você pode executar 'make exec' para abrir um shell no container."

help:
	@echo "Comandos disponíveis:"
	@echo "  make start           - Inicia o servidor Rails na porta padrão (3000) ou verifica conflitos"
	@echo "  make start port=3001 - Inicia o servidor Rails na porta específica indicada"
	@echo "  make check-ports     - Verifica as portas em uso"
	@echo "  make kill-port       - Libera uma porta específica"
	@echo "  make repair-web      - Repara problemas no container web"
	@echo "  make check-containers- Verifica o status dos containers"
	@echo "  make container-logs container=web - Exibe logs de um container específico"
	@echo "  make bundle-install  - Instala as dependências do bundle"
	@echo "  make first-run       - Configura o ambiente para primeira execução"
	@echo "  make rebuild         - Reconstrói completamente o ambiente (limpa cache e dados)"
	@echo "  make clean-all       - Limpa todos os caches e dados"