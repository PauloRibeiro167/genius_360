require 'colorize'

# FunÃ§Ã£o para normalizar texto
def normalize_text(text)
    return text unless text.is_a?(String)
    text.unicode_normalize(:nfkd)
        .encode('ASCII', replace: '')
        .downcase
        .gsub(/[^a-z0-9\s]/i, '')
        .strip
end

puts " Iniciando criaÃ§Ã£o de mensagens para demonstraÃ§Ã£o...".colorize(:blue)

# Contadores para estatÃ­sticas
mensagens_criadas = 0
total_sucesso = 0
total_erros = 0

# Verifica se existem usuÃ¡rios no sistema
users = User.all
if users.count < 2
    puts " ERRO: Ã‰ necessÃ¡rio ter pelo menos 2 usuÃ¡rios cadastrados.".colorize(:red)
    puts "ğŸŸ¡ Execute primeiro a seed de usuÃ¡rios (#37_users.rb)".colorize(:yellow)
    exit
end

# ConteÃºdos possÃ­veis para as mensagens
mensagens_operacionais = [
  "Prezado(a), poderia verificar a proposta #123?",
  "Cliente solicitou revisÃ£o das condiÃ§Ãµes de pagamento.",
  "ReuniÃ£o marcada para amanhÃ£ Ã s 14h.",
  "DocumentaÃ§Ã£o do cliente recebida, favor analisar.",
  "Urgente: Cliente aguardando retorno sobre limite.",
  "Proposta aprovada pelo comitÃª.",
  "NecessÃ¡rio regularizar pendÃªncias do cadastro.",
  "Encaminhando planilha atualizada de comissÃµes.",
  "Novo procedimento para anÃ¡lise de crÃ©dito.",
  "Feedback da Ãºltima apresentaÃ§Ã£o ao cliente."
]

mensagens_administrativas = [
  "Lembrete: Treinamento amanhÃ£ Ã s 9h.",
  "Por favor, atualize seu relatÃ³rio semanal.",
  "Nova polÃ­tica de atendimento disponÃ­vel na intranet.",
  "ConfirmaÃ§Ã£o de participaÃ§Ã£o no evento requerida.",
  "Sistema ficarÃ¡ indisponÃ­vel para manutenÃ§Ã£o hoje Ã s 22h.",
  "ReuniÃ£o de equipe antecipada para 15h.",
  "Favor validar os nÃºmeros do fechamento mensal.",
  "Novo material de treinamento disponÃ­vel.",
  "AlteraÃ§Ã£o no horÃ¡rio do plantÃ£o desta semana.",
  "Convite para confraternizaÃ§Ã£o da equipe."
]

# PerÃ­odo para as mensagens
data_inicial = 30.days.ago
data_final = Time.now

# NÃºmero de mensagens a serem criadas
total_mensagens = 100 # Ajuste conforme necessÃ¡rio

puts "Gerando #{total_mensagens} mensagens entre usuÃ¡rios..."

# Cria mensagens entre usuÃ¡rios
total_mensagens.times do |i|
  # Seleciona remetente e destinatÃ¡rio diferentes
  sender = users.sample
  recipient = users.reject { |u| u == sender }.sample
  
  # Define se Ã© uma mensagem operacional ou administrativa
  mensagem = if rand < 0.7
               mensagens_operacionais.sample # 70% operacionais
             else
               mensagens_administrativas.sample # 30% administrativas
             end
  
  # Define se a mensagem foi lida (mensagens mais antigas tÃªm mais chance de terem sido lidas)
  data_mensagem = rand(data_inicial..data_final)
  dias_atras = (Time.now - data_mensagem).to_i / 86400
  chance_leitura = [1.0 - (dias_atras / 30.0), 0.1].max # Quanto mais antiga, maior a chance de ter sido lida
  lida = rand < chance_leitura
  
  # Define se a mensagem foi descartada
  descartada = rand < 0.1 # 10% de chance de estar descartada
  
  # Cria a mensagem
  message = Message.new(
    content: mensagem,
    sender_id: sender.id,      # Corrigido: usando sender_id
    recipient_id: recipient.id, # Corrigido: usando recipient_id
    read: lida,
    discarded_at: descartada ? rand(data_mensagem..Time.now) : nil,
    created_at: data_mensagem,
    updated_at: data_mensagem
  )
  
  if message.save
    mensagens_criadas += 1
    total_sucesso += 1
    status = if message.discarded_at
               "ğŸŸ¡ [DESCARTADA]"
             elsif message.read
               "ğŸŸ¢ [LIDA]"
             else
               "âšª [NÃƒO LIDA]"
             end
    # Corrigido: usando primeiro nome ou email como fallback
    sender_name = sender.first_name.presence || sender.email
    recipient_name = recipient.first_name.presence || recipient.email
    puts " Mensagem criada: De #{normalize_text(sender_name)} para #{normalize_text(recipient_name)} #{status}".colorize(:blue)
  else
    total_erros += 1
    puts " ERRO ao criar mensagem: #{message.errors.full_messages.join(', ')}".colorize(:red)
  end
end

# Cria algumas conversas longas entre pares especÃ­ficos de usuÃ¡rios
3.times do
  # Seleciona dois usuÃ¡rios para a conversa
  usuario1, usuario2 = users.sample(2)
  
  # Cria uma sequÃªncia de 5 mensagens entre eles
  5.times do |i|
    # Alterna remetente e destinatÃ¡rio
    sender = i.even? ? usuario1 : usuario2
    recipient = i.even? ? usuario2 : usuario1
    
    # Cria mensagem da conversa
    mensagem = "Mensagem #{i + 1} da conversa: " + mensagens_operacionais.sample
    
    # Define tempo progressivo (mais recente)
    tempo = Time.now - (rand(1..24) * i).hours
    
    Message.create!(
      content: mensagem,
      sender_id: sender.id,      # Corrigido: usando sender_id
      recipient_id: recipient.id, # Corrigido: usando recipient_id
      read: i < 4, # Ãšltima mensagem nÃ£o lida
      created_at: tempo,
      updated_at: tempo
    )
    
    mensagens_criadas += 1
  end
  
  puts "Conversa criada entre #{usuario1.email} e #{usuario2.email} (5 mensagens)"
end

# EstatÃ­sticas
total_lidas = Message.where(read: true).count
total_nao_lidas = Message.where(read: false).count
total_descartadas = Message.where.not(discarded_at: nil).count

puts "\nâšª EstatÃ­sticas das mensagens:".colorize(:white)
puts "ğŸŸ¢ Total de mensagens criadas com sucesso: #{total_sucesso}".colorize(:green)
puts " Total de erros: #{total_erros}".colorize(:red) if total_erros > 0
puts " Mensagens lidas: #{total_lidas} (#{(total_lidas.to_f / mensagens_criadas * 100).round(1)}%)".colorize(:cyan)
puts " Mensagens nÃ£o lidas: #{total_nao_lidas} (#{(total_nao_lidas.to_f / mensagens_criadas * 100).round(1)}%)".colorize(:cyan)
puts "ğŸŸ¡ Mensagens descartadas: #{total_descartadas} (#{(total_descartadas.to_f / mensagens_criadas * 100).round(1)}%)".colorize(:yellow)

puts "\n Ranking de usuÃ¡rios por mensagens enviadas:".colorize(:blue)
top_senders = Message.group(:sender_id)
                    .count
                    .sort_by { |_, count| -count }
                    .first(5)

top_senders.each.with_index(1) do |(user_id, count), index|
    user = User.find(user_id)
    display_name = user.first_name.presence || user.email
    puts "âšª #{index}Âº - #{normalize_text(display_name)}: #{count} mensagens".colorize(:white)
end

puts "\nğŸŸ¢ Processo de criaÃ§Ã£o de mensagens concluÃ­do com sucesso!".colorize(:green)