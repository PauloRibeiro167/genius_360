#!/bin/bash

# Definir cores para sa√≠da
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîß Iniciando reparo profundo do ambiente Genius360...${NC}"

# Fun√ß√£o para criar log de diagn√≥stico
create_diagnostic_log() {
    echo -e "${BLUE}üìä Criando log de diagn√≥stico...${NC}"
    
    # Criar diret√≥rio para logs se n√£o existir
    mkdir -p logs
    
    LOG_FILE="logs/diagnostic_$(date +%Y%m%d_%H%M%S).log"
    
    {
        echo "=== Diagn√≥stico Genius360 $(date) ==="
        echo ""
        echo "=== Vers√£o do Docker ==="
        docker --version
        echo ""
        echo "=== Vers√£o do Docker Compose ==="
        docker-compose --version
        echo ""
        echo "=== Status dos Containers ==="
        docker ps -a
        echo ""
        echo "=== Logs do Container Web ==="
        docker logs genius360_web 2>&1 || echo "Container web n√£o dispon√≠vel"
        echo ""
        echo "=== Logs do Container Postgres ==="
        docker logs genius360_postgres 2>&1 || echo "Container postgres n√£o dispon√≠vel"
        echo ""
        echo "=== Arquitetura do Projeto ==="
        find . -type f -name "Gemfile" -o -name "Gemfile.lock" -o -name "config.ru" -o -name "database.yml" | sort
        echo ""
        echo "=== Conte√∫do do docker-compose.yml ==="
        cat docker-compose.yml 2>/dev/null || echo "Arquivo n√£o encontrado"
        echo ""
        echo "=== Volumes Docker ==="
        docker volume ls | grep genius360
        echo ""
        echo "=== Redes Docker ==="
        docker network ls | grep genius360
        echo ""
        echo "=== Configura√ß√£o do Banco de Dados ==="
        cat config/database.yml 2>/dev/null || echo "Arquivo n√£o encontrado"
        echo ""
    } > "$LOG_FILE"
    
    echo -e "${GREEN}‚úÖ Log de diagn√≥stico criado em ${LOG_FILE}${NC}"
    return 0
}

# Parar todos os containers
echo -e "${BLUE}üõë Parando todos os containers do projeto...${NC}"
docker-compose down || true

# Criar log de diagn√≥stico antes de prosseguir
create_diagnostic_log

# Remover volumes Docker para come√ßar com ambiente limpo
echo -e "${YELLOW}‚ö†Ô∏è Removendo volumes Docker do projeto para come√ßar limpo...${NC}"
docker volume rm $(docker volume ls -q | grep genius360) 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è N√£o foi poss√≠vel remover volumes ou nenhum volume encontrado${NC}"

# Remover containers antigos se existirem
echo -e "${YELLOW}‚ö†Ô∏è Removendo containers antigos...${NC}"
docker rm -f genius360_web genius360_postgres 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è N√£o foi poss√≠vel remover containers ou nenhum container encontrado${NC}"

# Verificar se existem portas em uso que poderiam causar conflitos
echo -e "${BLUE}üîç Verificando portas em conflito...${NC}"
for port in 3000 3001 5432; do
    if lsof -i :$port >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è Porta $port j√° est√° em uso. Tentando liberar...${NC}"
        pid=$(lsof -t -i :$port)
        if [ -n "$pid" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è Tentando matar processo $pid usando a porta $port...${NC}"
            kill -9 $pid 2>/dev/null || echo -e "${RED}‚ùå N√£o foi poss√≠vel matar o processo. Pode precisar de permiss√µes de sudo.${NC}"
        fi
    else
        echo -e "${GREEN}‚úÖ Porta $port est√° livre${NC}"
    fi
done

# Garantir que o diret√≥rio de configura√ß√£o existe
mkdir -p config

# Criar arquivo database.yml b√°sico
echo -e "${BLUE}üîß Criando arquivo de configura√ß√£o do banco de dados m√≠nimo...${NC}"
cat > config/database.yml << EOL
default: &default
  adapter: postgresql
  encoding: unicode
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>
  host: postgres
  username: postgres
  password: postgres

development:
  <<: *default
  database: genius360_development

test:
  <<: *default
  database: genius360_test

production:
  <<: *default
  database: genius360_production
EOL

# Limpar arquivos tempor√°rios que podem causar problemas
echo -e "${BLUE}üßπ Limpando arquivos tempor√°rios...${NC}"
rm -rf tmp/pids/* tmp/cache/* log/*.log 2>/dev/null || mkdir -p tmp/pids tmp/cache log

# Ajustar permiss√µes
echo -e "${BLUE}üîß Ajustando permiss√µes...${NC}"
chmod -R 755 . 2>/dev/null || echo -e "${YELLOW}‚ö†Ô∏è N√£o foi poss√≠vel ajustar todas as permiss√µes${NC}"

# Reconstruir e iniciar os containers
echo -e "${BLUE}üèóÔ∏è Reconstruindo containers...${NC}"
docker-compose build --no-cache

echo -e "${BLUE}üöÄ Iniciando servi√ßos...${NC}"
docker-compose up -d

# Esperar inicializa√ß√£o
echo -e "${BLUE}‚è≥ Aguardando inicializa√ß√£o dos servi√ßos...${NC}"
sleep 15

# Verificar se o banco de dados est√° acess√≠vel e criar se necess√°rio
echo -e "${BLUE}üóÑÔ∏è Configurando banco de dados...${NC}"
if docker ps | grep -q genius360_postgres; then
    echo -e "${BLUE}üîß PostgreSQL est√° rodando. Configurando bancos de dados...${NC}"
    
    # Esperar o PostgreSQL inicializar completamente
    sleep 5
    
    # Criar usu√°rio e bancos de dados
    docker exec -i genius360_postgres psql -U postgres << EOL
CREATE USER postgres WITH SUPERUSER PASSWORD 'postgres';
CREATE DATABASE genius360_development OWNER postgres;
CREATE DATABASE genius360_test OWNER postgres;
GRANT ALL PRIVILEGES ON DATABASE genius360_development TO postgres;
GRANT ALL PRIVILEGES ON DATABASE genius360_test TO postgres;
EOL
    
    echo -e "${GREEN}‚úÖ Banco de dados configurado${NC}"
else
    echo -e "${RED}‚ùå Container PostgreSQL n√£o est√° rodando${NC}"
fi

# Verificar status final
echo -e "${BLUE}üîç Verificando status final...${NC}"
docker ps -a | grep genius360

# Verificar logs para diagn√≥stico
echo -e "${BLUE}üìã Verificando logs do container web...${NC}"
docker logs genius360_web 2>&1 | tail -n 20 || echo -e "${RED}‚ùå N√£o foi poss√≠vel acessar logs do container web${NC}"

# Tentar resolver problemas de depend√™ncias se o container estiver rodando
if docker ps | grep -q genius360_web; then
    echo -e "${BLUE}üì¶ Instalando depend√™ncias no container web...${NC}"
    docker exec -i genius360_web bash -c "
        cd /app
        bundle install || gem install bundler && bundle install
        if [ -f bin/setup ]; then 
            bin/setup || echo 'Falha ao executar bin/setup'
        else 
            bundle exec rake db:create db:migrate || echo 'Falha ao configurar banco de dados'
        fi
    " || echo -e "${RED}‚ùå Falha ao instalar depend√™ncias${NC}"
fi

# Verificar se o container ainda est√° reiniciando
if docker inspect --format='{{.State.Restarting}}' genius360_web 2>/dev/null | grep -q "true"; then
    echo -e "${RED}‚ùå O container web ainda est√° em loop de reinicializa√ß√£o${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Verifique os logs completos para identificar o problema: docker logs genius360_web${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Voc√™ pode precisar ajustar o Dockerfile ou docker-compose.yml para resolver o problema${NC}"
else
    echo -e "${GREEN}‚úÖ O container web parece estar est√°vel agora!${NC}"
    echo -e "${GREEN}‚úÖ Tente 'docker exec -it genius360_web bash' para acessar o container${NC}"
fi

echo -e "${GREEN}‚úÖ Processo de reparo profundo conclu√≠do!${NC}"
