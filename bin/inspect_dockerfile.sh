#!/bin/bash

# Cores para sa√≠da
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Encontrar o Dockerfile
if [ -f "./Dockerfile" ]; then
  DOCKERFILE="./Dockerfile"
elif [ -f "./docker/Dockerfile" ]; then
  DOCKERFILE="./docker/Dockerfile"
else
  echo -e "${RED}‚ùå Dockerfile n√£o encontrado!${NC}"
  exit 1
fi

echo -e "${BLUE}üîç Inspecionando Dockerfile: ${DOCKERFILE}${NC}\n"

# Validar sintaxe do Dockerfile
echo -e "${BLUE}üß™ Verificando sintaxe...${NC}"
if ! docker run --rm -i hadolint/hadolint < "$DOCKERFILE" 2>/dev/null; then
  echo -e "${YELLOW}‚ö†Ô∏è Aviso: Poss√≠veis problemas de sintaxe encontrados no Dockerfile${NC}"
else
  echo -e "${GREEN}‚úÖ Sintaxe do Dockerfile v√°lida${NC}"
fi

# Extrair e verificar a imagem base
BASE_IMAGE=$(grep -m 1 "^FROM" "$DOCKERFILE" | sed 's/FROM //')
echo -e "\n${BLUE}üì¶ Imagem base:${NC} $BASE_IMAGE"

# Verificar vers√£o do Ruby
RUBY_VERSION=$(echo "$BASE_IMAGE" | grep -oP 'ruby:\K[0-9]+\.[0-9]+(\.[0-9]+)?')
if [ -n "$RUBY_VERSION" ]; then
  echo -e "${BLUE}üíé Vers√£o do Ruby:${NC} $RUBY_VERSION"
  
  # Comparar com o Gemfile
  if [ -f "./Gemfile" ]; then
    GEMFILE_RUBY=$(grep -oP 'ruby ["\047]\K[0-9]+\.[0-9]+(\.[0-9]+)?' "./Gemfile" || echo "n√£o especificado")
    echo -e "${BLUE}üìÑ Vers√£o do Ruby no Gemfile:${NC} $GEMFILE_RUBY"
    
    if [ "$GEMFILE_RUBY" != "n√£o especificado" ] && [ "$RUBY_VERSION" != "$GEMFILE_RUBY" ]; then
      echo -e "${RED}‚ùå PROBLEMA: Incompatibilidade na vers√£o do Ruby!${NC}"
      echo -e "${YELLOW}   Dockerfile: ${RUBY_VERSION} | Gemfile: ${GEMFILE_RUBY}${NC}"
      echo -e "${YELLOW}   Sugest√£o: Atualize o Dockerfile para usar ruby:${GEMFILE_RUBY}${NC}"
    elif [ "$GEMFILE_RUBY" != "n√£o especificado" ]; then
      echo -e "${GREEN}‚úÖ Vers√µes do Ruby compat√≠veis${NC}"
    fi
  fi
fi

# Verificar instala√ß√£o de depend√™ncias do sistema
echo -e "\n${BLUE}üîß Analisando instala√ß√£o de depend√™ncias...${NC}"
if grep -q "apt-get install" "$DOCKERFILE"; then
  APT_UPDATE=$(grep -q "apt-get update" "$DOCKERFILE" && echo "sim" || echo "n√£o")
  APT_CLEANUP=$(grep -q "apt-get clean\|rm -rf /var/lib/apt" "$DOCKERFILE" && echo "sim" || echo "n√£o")
  
  if [ "$APT_UPDATE" = "n√£o" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è apt-get update n√£o encontrado antes de instalar pacotes${NC}"
  fi
  
  if [ "$APT_CLEANUP" = "n√£o" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è Limpeza do cache apt n√£o encontrada${NC}"
  fi
fi

# Verificar instala√ß√£o do Bundler
BUNDLER_INSTALL=$(grep -q "gem install bundler" "$DOCKERFILE" && echo "sim" || echo "n√£o")
if [ "$BUNDLER_INSTALL" = "n√£o" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è Instala√ß√£o expl√≠cita do Bundler n√£o encontrada${NC}"
fi

# Verificar comando de c√≥pia de Gemfile e instala√ß√£o de gems
COPY_GEMFILE=$(grep -q "COPY.*Gemfile" "$DOCKERFILE" && echo "sim" || echo "n√£o")
BUNDLE_INSTALL=$(grep -q "bundle install" "$DOCKERFILE" && echo "sim" || echo "n√£o")

if [ "$COPY_GEMFILE" = "sim" ] && [ "$BUNDLE_INSTALL" = "sim" ]; then
  echo -e "${GREEN}‚úÖ Gemfile copiado e bundle install presente${NC}"
else
  echo -e "${RED}‚ùå PROBLEMA: Configura√ß√£o incompleta para gems!${NC}"
  [ "$COPY_GEMFILE" = "n√£o" ] && echo -e "${YELLOW}   - C√≥pia do Gemfile n√£o encontrada${NC}"
  [ "$BUNDLE_INSTALL" = "n√£o" ] && echo -e "${YELLOW}   - bundle install n√£o encontrado${NC}"
fi

# Verificar uso de multi-stage ou copy-all
MULTI_STAGE=$(grep -q "FROM.*AS" "$DOCKERFILE" && echo "sim" || echo "n√£o")
COPY_ALL=$(grep -q "COPY \." "$DOCKERFILE" && echo "sim" || echo "n√£o")

if [ "$MULTI_STAGE" = "sim" ]; then
  echo -e "${GREEN}‚úÖ Build multi-stage detectado${NC}"
elif [ "$COPY_ALL" = "sim" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è C√≥pia de todos os arquivos detectada. Considere otimizar.${NC}"
fi

# Verificar usu√°rio n√£o-root
USER_DEFINED=$(grep -q "^USER" "$DOCKERFILE" && echo "sim" || echo "n√£o")
if [ "$USER_DEFINED" = "n√£o" ]; then
  echo -e "${YELLOW}‚ö†Ô∏è Usu√°rio n√£o-root n√£o definido${NC}"
else
  USER=$(grep "^USER" "$DOCKERFILE" | tail -1 | awk '{print $2}')
  echo -e "${GREEN}‚úÖ Container configurado para executar como usu√°rio: ${USER}${NC}"
fi

echo -e "\n${BLUE}üìù Recomenda√ß√µes:${NC}"
if [ "$RUBY_VERSION" != "$GEMFILE_RUBY" ] && [ -n "$GEMFILE_RUBY" ] && [ "$GEMFILE_RUBY" != "n√£o especificado" ]; then
  echo -e "1. ${YELLOW}Atualize a vers√£o do Ruby para ${GEMFILE_RUBY} no Dockerfile${NC}"
  echo -e "   Exemplo: FROM ruby:${GEMFILE_RUBY}"
fi

echo -e "2. ${YELLOW}Certifique-se de instalar uma vers√£o espec√≠fica do Bundler:${NC}"
echo -e "   RUN gem install bundler -v '~> 2.6.0'"

echo -e "3. ${YELLOW}Certifique-se de usar flags de otimiza√ß√£o no bundle install:${NC}"
echo -e "   RUN bundle install --jobs=4 --without=development:test"

echo -e "4. ${YELLOW}Ap√≥s resolver os problemas, reconstrua a imagem:${NC}"
echo -e "   docker-compose build --no-cache web"
