require 'rails_helper'

RSpec.describe <%= controller_class_name %>Controller, <%= type_metatag(:controller) %> do
  let(:<%= singular_table_name %>) { create(:<%= singular_table_name %>) }
  let(:valid_attributes) { attributes_for(:<%= singular_table_name %>) }
  let(:invalid_attributes) { { name: nil } }

  describe "GET /index" do
    it "retorna uma resposta de sucesso" do
      get <%= index_helper %>_url
      expect(response).to be_successful
    end

    it "atribui @q para busca" do
      get <%= index_helper %>_url
      expect(assigns(:q)).to be_a_new(Ransack::Search)
    end
  end

  describe "GET /show" do
    it "retorna uma resposta de sucesso" do
      get <%= show_helper %>_url(<%= singular_table_name %>)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "retorna uma resposta de sucesso" do
      get new_<%= singular_table_name %>_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "retorna uma resposta de sucesso" do
      get edit_<%= singular_table_name %>_url(<%= singular_table_name %>)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "com atributos válidos" do
      it "cria um novo <%= human_name %>" do
        expect {
          post <%= index_helper %>_url, params: { <%= singular_table_name %>: valid_attributes }
        }.to change(<%= class_name %>, :count).by(1)
      end

      it "redireciona para o <%= human_name %> criado" do
        post <%= index_helper %>_url, params: { <%= singular_table_name %>: valid_attributes }
        expect(response).to redirect_to(<%= singular_table_name %>_url(<%= class_name %>.last))
      end
    end

    context "com atributos inválidos" do
      it "não cria um novo <%= human_name %>" do
        expect {
          post <%= index_helper %>_url, params: { <%= singular_table_name %>: invalid_attributes }
        }.not_to change(<%= class_name %>, :count)
      end

      it "renderiza a página 'new'" do
        post <%= index_helper %>_url, params: { <%= singular_table_name %>: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /update" do
    context "com atributos válidos" do
      let(:new_attributes) { { name: "Novo Nome" } }

      it "atualiza o <%= human_name %> solicitado" do
        patch <%= show_helper %>_url(<%= singular_table_name %>), params: { <%= singular_table_name %>: new_attributes }
        <%= singular_table_name %>.reload
        expect(<%= singular_table_name %>.name).to eq("Novo Nome")
      end

      it "redireciona para o <%= human_name %>" do
        patch <%= show_helper %>_url(<%= singular_table_name %>), params: { <%= singular_table_name %>: new_attributes }
        expect(response).to redirect_to(<%= singular_table_name %>_url(<%= singular_table_name %>))
      end
    end

    context "com atributos inválidos" do
      it "renderiza a página 'edit'" do
        patch <%= show_helper %>_url(<%= singular_table_name %>), params: { <%= singular_table_name %>: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "PATCH /discard" do
    it "marca o registro como descartado" do
      patch discard_<%= singular_table_name %>_url(<%= singular_table_name %>)
      <%= singular_table_name %>.reload
      expect(<%= singular_table_name %>).to be_discarded
    end

    it "redireciona para a lista de <%= human_name.pluralize.downcase %>" do
      patch discard_<%= singular_table_name %>_url(<%= singular_table_name %>)
      expect(response).to redirect_to(<%= index_helper %>_url)
    end
  end
end